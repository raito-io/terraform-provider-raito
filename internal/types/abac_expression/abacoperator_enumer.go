// Code generated by "enumer -type=AbacOperator -values -gqlgen -yaml -json -trimprefix=AbacOperator"; DO NOT EDIT.

package abac_expression

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _AbacOperatorName = "HasTagContainsTagPropertyEqualsPropertyIn"

var _AbacOperatorIndex = [...]uint8{0, 6, 17, 31, 41}

const _AbacOperatorLowerName = "hastagcontainstagpropertyequalspropertyin"

func (i AbacOperator) String() string {
	if i < 0 || i >= AbacOperator(len(_AbacOperatorIndex)-1) {
		return fmt.Sprintf("AbacOperator(%d)", i)
	}
	return _AbacOperatorName[_AbacOperatorIndex[i]:_AbacOperatorIndex[i+1]]
}

func (AbacOperator) Values() []string {
	return AbacOperatorStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AbacOperatorNoOp() {
	var x [1]struct{}
	_ = x[AbacOperatorHasTag-(0)]
	_ = x[AbacOperatorContainsTag-(1)]
	_ = x[AbacOperatorPropertyEquals-(2)]
	_ = x[AbacOperatorPropertyIn-(3)]
}

var _AbacOperatorValues = []AbacOperator{AbacOperatorHasTag, AbacOperatorContainsTag, AbacOperatorPropertyEquals, AbacOperatorPropertyIn}

var _AbacOperatorNameToValueMap = map[string]AbacOperator{
	_AbacOperatorName[0:6]:        AbacOperatorHasTag,
	_AbacOperatorLowerName[0:6]:   AbacOperatorHasTag,
	_AbacOperatorName[6:17]:       AbacOperatorContainsTag,
	_AbacOperatorLowerName[6:17]:  AbacOperatorContainsTag,
	_AbacOperatorName[17:31]:      AbacOperatorPropertyEquals,
	_AbacOperatorLowerName[17:31]: AbacOperatorPropertyEquals,
	_AbacOperatorName[31:41]:      AbacOperatorPropertyIn,
	_AbacOperatorLowerName[31:41]: AbacOperatorPropertyIn,
}

var _AbacOperatorNames = []string{
	_AbacOperatorName[0:6],
	_AbacOperatorName[6:17],
	_AbacOperatorName[17:31],
	_AbacOperatorName[31:41],
}

// AbacOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AbacOperatorString(s string) (AbacOperator, error) {
	if val, ok := _AbacOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AbacOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AbacOperator values", s)
}

// AbacOperatorValues returns all values of the enum
func AbacOperatorValues() []AbacOperator {
	return _AbacOperatorValues
}

// AbacOperatorStrings returns a slice of all String values of the enum
func AbacOperatorStrings() []string {
	strs := make([]string, len(_AbacOperatorNames))
	copy(strs, _AbacOperatorNames)
	return strs
}

// IsAAbacOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AbacOperator) IsAAbacOperator() bool {
	for _, v := range _AbacOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AbacOperator
func (i AbacOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AbacOperator
func (i *AbacOperator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AbacOperator should be a string, got %s", data)
	}

	var err error
	*i, err = AbacOperatorString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for AbacOperator
func (i AbacOperator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for AbacOperator
func (i *AbacOperator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AbacOperatorString(s)
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for AbacOperator
func (i AbacOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for AbacOperator
func (i *AbacOperator) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("AbacOperator should be a string, got %T", value)
	}

	var err error
	*i, err = AbacOperatorString(str)
	return err
}
