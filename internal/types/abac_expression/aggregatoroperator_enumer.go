// Code generated by "enumer -type=AggregatorOperator -values -gqlgen -yaml -json -trimprefix=AggregatorOperator"; DO NOT EDIT.

package abac_expression

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _AggregatorOperatorName = "AndOr"

var _AggregatorOperatorIndex = [...]uint8{0, 3, 5}

const _AggregatorOperatorLowerName = "andor"

func (i AggregatorOperator) String() string {
	if i < 0 || i >= AggregatorOperator(len(_AggregatorOperatorIndex)-1) {
		return fmt.Sprintf("AggregatorOperator(%d)", i)
	}
	return _AggregatorOperatorName[_AggregatorOperatorIndex[i]:_AggregatorOperatorIndex[i+1]]
}

func (AggregatorOperator) Values() []string {
	return AggregatorOperatorStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AggregatorOperatorNoOp() {
	var x [1]struct{}
	_ = x[AggregatorOperatorAnd-(0)]
	_ = x[AggregatorOperatorOr-(1)]
}

var _AggregatorOperatorValues = []AggregatorOperator{AggregatorOperatorAnd, AggregatorOperatorOr}

var _AggregatorOperatorNameToValueMap = map[string]AggregatorOperator{
	_AggregatorOperatorName[0:3]:      AggregatorOperatorAnd,
	_AggregatorOperatorLowerName[0:3]: AggregatorOperatorAnd,
	_AggregatorOperatorName[3:5]:      AggregatorOperatorOr,
	_AggregatorOperatorLowerName[3:5]: AggregatorOperatorOr,
}

var _AggregatorOperatorNames = []string{
	_AggregatorOperatorName[0:3],
	_AggregatorOperatorName[3:5],
}

// AggregatorOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AggregatorOperatorString(s string) (AggregatorOperator, error) {
	if val, ok := _AggregatorOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AggregatorOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AggregatorOperator values", s)
}

// AggregatorOperatorValues returns all values of the enum
func AggregatorOperatorValues() []AggregatorOperator {
	return _AggregatorOperatorValues
}

// AggregatorOperatorStrings returns a slice of all String values of the enum
func AggregatorOperatorStrings() []string {
	strs := make([]string, len(_AggregatorOperatorNames))
	copy(strs, _AggregatorOperatorNames)
	return strs
}

// IsAAggregatorOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AggregatorOperator) IsAAggregatorOperator() bool {
	for _, v := range _AggregatorOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AggregatorOperator
func (i AggregatorOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AggregatorOperator
func (i *AggregatorOperator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AggregatorOperator should be a string, got %s", data)
	}

	var err error
	*i, err = AggregatorOperatorString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for AggregatorOperator
func (i AggregatorOperator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for AggregatorOperator
func (i *AggregatorOperator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AggregatorOperatorString(s)
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for AggregatorOperator
func (i AggregatorOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for AggregatorOperator
func (i *AggregatorOperator) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("AggregatorOperator should be a string, got %T", value)
	}

	var err error
	*i, err = AggregatorOperatorString(str)
	return err
}
